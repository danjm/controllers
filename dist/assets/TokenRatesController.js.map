{"version":3,"file":"TokenRatesController.js","sourceRoot":"","sources":["../../src/assets/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseController, BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch, toChecksumHexAddress } from '../util';\n\nimport type { NetworkState } from '../network/NetworkController';\nimport type { TokensState } from './TokensController';\nimport type { CurrencyRateState } from './CurrencyRateController';\n\n/**\n * @type CoinGeckoResponse\n *\n * CoinGecko API response representation\n *\n */\nexport interface CoinGeckoResponse {\n  [address: string]: {\n    [currency: string]: number;\n  };\n}\n/**\n * @type CoinGeckoPlatform\n *\n * CoinGecko supported platform API representation\n *\n */\nexport interface CoinGeckoPlatform {\n  id: string;\n  chain_identifier: null | number;\n  name: string;\n  shortname: string;\n}\n\n/**\n * @type Token\n *\n * Token representation\n *\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property image - Image of the token, url or bit32 image\n */\nexport interface Token {\n  address: string;\n  decimals: number;\n  symbol: string;\n  image?: string;\n  balanceError?: Error | null;\n  isERC721?: boolean;\n}\n\n/**\n * @type TokenRatesConfig\n *\n * Token rates controller configuration\n *\n * @property interval - Polling interval used to fetch new token rates\n * @property nativeCurrency - Current native currency selected to use base of rates\n * @property chainId - Current network chainId\n * @property tokens - List of tokens to track exchange rates for\n * @property threshold - Threshold to invalidate the supportedChains\n */\nexport interface TokenRatesConfig extends BaseConfig {\n  interval: number;\n  nativeCurrency: string;\n  chainId: string;\n  tokens: Token[];\n  threshold: number;\n}\n\ninterface ContractExchangeRates {\n  [address: string]: number | undefined;\n}\n\ninterface SupportedChainsCache {\n  timestamp: number;\n  data: CoinGeckoPlatform[] | null;\n}\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n *\n * @property contractExchangeRates - Hash of token contract addresses to exchange rates\n * @property supportedChains - Cached chain data\n */\nexport interface TokenRatesState extends BaseState {\n  contractExchangeRates: ContractExchangeRates;\n  supportedChains: SupportedChainsCache;\n}\n\nconst CoinGeckoApi = {\n  BASE_URL: 'https://api.coingecko.com/api/v3',\n  getTokenPriceURL(chainSlug: string, query: string) {\n    return `${this.BASE_URL}/simple/token_price/${chainSlug}?${query}`;\n  },\n  getPlatformsURL() {\n    return `${this.BASE_URL}/asset_platforms`;\n  },\n};\n\n/**\n * Finds the chain slug in the data array given a chainId\n *\n * @param chainId current chainId\n * @param data Array of supported platforms from CoinGecko API\n * @returns Slug of chainId\n */\nfunction findChainSlug(\n  chainId: string,\n  data: CoinGeckoPlatform[] | null,\n): string | null {\n  if (!data) {\n    return null;\n  }\n  const chain =\n    data.find(\n      ({ chain_identifier }) =>\n        chain_identifier !== null && String(chain_identifier) === chainId,\n    ) ?? null;\n  return chain?.id || null;\n}\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends BaseController<\n  TokenRatesConfig,\n  TokenRatesState\n> {\n  private handle?: NodeJS.Timer;\n\n  private tokenList: Token[] = [];\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'TokenRatesController';\n\n  /**\n   * Creates a TokenRatesController instance\n   *\n   * @param options\n   * @param options.onAssetsStateChange - Allows subscribing to assets controller state changes\n   * @param options.onCurrencyRateStateChange - Allows subscribing to currency rate controller state changes\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(\n    {\n      onTokensStateChange,\n      onCurrencyRateStateChange,\n      onNetworkStateChange,\n    }: {\n      onTokensStateChange: (\n        listener: (tokensState: TokensState) => void,\n      ) => void;\n      onCurrencyRateStateChange: (\n        listener: (currencyRateState: CurrencyRateState) => void,\n      ) => void;\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n    },\n    config?: Partial<TokenRatesConfig>,\n    state?: Partial<TokenRatesState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      disabled: true,\n      interval: 3 * 60 * 1000,\n      nativeCurrency: 'eth',\n      chainId: '',\n      tokens: [],\n      threshold: 6 * 60 * 60 * 1000,\n    };\n    this.defaultState = {\n      contractExchangeRates: {},\n      supportedChains: {\n        timestamp: 0,\n        data: null,\n      },\n    };\n    this.initialize();\n    this.configure({ disabled: false }, false, false);\n    onTokensStateChange((tokensState) => {\n      this.configure({ tokens: tokensState.tokens });\n    });\n    onCurrencyRateStateChange((currencyRateState) => {\n      this.configure({ nativeCurrency: currencyRateState.nativeCurrency });\n    });\n    onNetworkStateChange(({ provider }) => {\n      const { chainId } = provider;\n      this.configure({ chainId });\n    });\n    this.poll();\n  }\n\n  /**\n   * Sets a new polling interval\n   *\n   * @param interval - Polling interval used to fetch new token rates\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateExchangeRates());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Sets a new chainId\n   *\n   * TODO: Replace this with a method\n   *\n   * @param chainId current chainId\n   */\n  set chainId(_chainId: string) {\n    !this.disabled && safelyExecute(() => this.updateExchangeRates());\n  }\n\n  get chainId() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Sets a new token list to track prices\n   *\n   * TODO: Replace this with a method\n   *\n   * @param tokens - List of tokens to track exchange rates for\n   */\n  set tokens(tokens: Token[]) {\n    this.tokenList = tokens;\n    !this.disabled && safelyExecute(() => this.updateExchangeRates());\n  }\n\n  get tokens() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Fetches supported platforms from CoinGecko API\n   *\n   * @returns Array of supported platforms by CoinGecko API\n   */\n  async fetchSupportedChains(): Promise<CoinGeckoPlatform[] | null> {\n    try {\n      const platforms: CoinGeckoPlatform[] = await handleFetch(\n        CoinGeckoApi.getPlatformsURL(),\n      );\n      return platforms;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Fetches a pairs of token address and native currency\n   *\n   * @param chainSlug - Chain string identifier\n   * @param query - Query according to tokens in tokenList and native currency\n   * @returns - Promise resolving to exchange rates for given pairs\n   */\n  async fetchExchangeRate(\n    chainSlug: string,\n    query: string,\n  ): Promise<CoinGeckoResponse> {\n    return handleFetch(CoinGeckoApi.getTokenPriceURL(chainSlug, query));\n  }\n\n  /**\n   * Gets current chainId slug from cached supported platforms CoinGecko API response.\n   * If cached supported platforms response is stale, fetches and updates it.\n   *\n   * @returns current chainId\n   */\n  async getChainSlug(): Promise<string | null> {\n    const { threshold, chainId } = this.config;\n    const { supportedChains } = this.state;\n    const { data, timestamp } = supportedChains;\n\n    const now = Date.now();\n\n    if (now - timestamp > threshold) {\n      try {\n        const platforms = await this.fetchSupportedChains();\n        this.update({\n          supportedChains: {\n            data: platforms,\n            timestamp: Date.now(),\n          },\n        });\n        return findChainSlug(chainId, platforms);\n      } catch {\n        return findChainSlug(chainId, data);\n      }\n    }\n\n    return findChainSlug(chainId, data);\n  }\n\n  /**\n   * Updates exchange rates for all tokens\n   *\n   * @returns Promise resolving when this operation completes\n   */\n  async updateExchangeRates() {\n    if (this.tokenList.length === 0 || this.disabled) {\n      return;\n    }\n    const { nativeCurrency } = this.config;\n\n    const slug = await this.getChainSlug();\n\n    const newContractExchangeRates: ContractExchangeRates = {};\n    if (!slug) {\n      this.tokenList.forEach((token) => {\n        const address = toChecksumHexAddress(token.address);\n        newContractExchangeRates[address] = undefined;\n      });\n    } else {\n      const pairs = this.tokenList.map((token) => token.address).join(',');\n      const query = `contract_addresses=${pairs}&vs_currencies=${nativeCurrency.toLowerCase()}`;\n      const prices = await this.fetchExchangeRate(slug, query);\n      this.tokenList.forEach((token) => {\n        const address = toChecksumHexAddress(token.address);\n        const price = prices[token.address.toLowerCase()];\n        newContractExchangeRates[address] = price\n          ? price[nativeCurrency.toLowerCase()]\n          : 0;\n      });\n    }\n    this.update({ contractExchangeRates: newContractExchangeRates });\n  }\n}\n\nexport default TokenRatesController;\n"]}